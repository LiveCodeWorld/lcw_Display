[{"created":"2025-01-21T22:11:46.399Z","text":"{{$:/plugins/nico/projectify/ui/dashboard/Dashboard}}","title":"About","modified":"2025-01-21T22:11:49.668Z"},{"created":"2025-01-22T17:13:04.804Z","text":"","description":"A project to develop and curate an amazing set of svg icons, colour palettes and widget designs to be used in Hitchhiker's and other initiatives.","category":"","tags":["Project"],"modified":"2025-01-22T17:15:16.884Z","title":"Beautiful Widgets","list":["TiddlyWiki Buttons","Morphing Shapes","SVG Icons","Wasm Animations"]},{"created":"2025-01-22T21:38:35.727Z","text":"To create a button in TiddlyWiki with an icon, you can use the `<$button>` widget combined with an image or an `<$transclude>` widget to include an existing icon. Here's how you can do it:\n\n---\n\n### **Basic Button with Icon**\n\n```tiddlywiki\n<$button>\n  <$image source=\"$:/core/images/save-button\" alt=\"Save Icon\"/>\n  Save\n</$button>\n```\n\n**Explanation:**\n- `<$button>`: Defines the button widget.\n- `<$image>`: Adds an icon by sourcing an image tiddler (`$:/core/images/save-button` is a built-in TiddlyWiki image for the save icon).\n- `Save`: The text label for the button, which appears next to the icon.\n\n---\n\n### **Custom Icon Button**\n\nIf you want to use a custom icon, add your icon to TiddlyWiki as an image tiddler:\n\n1. **Create an Image Tiddler**:\n   - Drag and drop an image file into TiddlyWiki.\n   - Name it, e.g., `$:/images/custom-icon`.\n\n2. **Button with Custom Icon**:\n   ```tiddlywiki\n   <$button>\n     <$image source=\"$:/images/custom-icon\" alt=\"Custom Icon\"/>\n     Click Me\n   </$button>\n   ```\n\n---\n\n### **Icon-Only Button**\n\nIf you want a button with just an icon and no text:\n\n```tiddlywiki\n<$button class=\"tc-btn-invisible\">\n  <$image source=\"$:/core/images/save-button\" alt=\"Save Icon\"/>\n</$button>\n```\n\n**Explanation:**\n- `class=\"tc-btn-invisible\"`: Removes the button's background and borders, showing only the icon.\n\n---\n\n### **Using a Macro for Reusability**\n\nYou can define a macro to reuse the button structure:\n\n```tiddlywiki\n\\define iconButton(icon, action, label)\n<$button>\n  <$action-sendmessage $message=<<action>>/>\n  <$image source=<<icon>> alt=<<label>>/>\n  <<label>>\n</$button>\n\\end\n```\n\n**Usage**:\n```tiddlywiki\n<<iconButton \"$:/core/images/arrow-left\" \"tm-go-back\" \"Back\">>\n```\n\n---\n\n### **Examples of Built-in TiddlyWiki Icons**\n\nHere are some built-in icons you can use:\n\n| Icon Name                  | Source Tiddler                 |\n|----------------------------|--------------------------------|\n| Save Button                | `$:/core/images/save-button`  |\n| Cancel Button              | `$:/core/images/cancel-button`|\n| Arrow Left                 | `$:/core/images/arrow-left`   |\n| Arrow Right                | `$:/core/images/arrow-right`  |\n\n---\n\n### **Adding Functionality to the Button**\n\nYou can attach functionality to the button using `<$action-sendmessage>` or other action widgets:\n\n```tiddlywiki\n<$button>\n  <$action-sendmessage $message=\"tm-save-wiki\"/>\n  <$image source=\"$:/core/images/save-button\" alt=\"Save Icon\"/>\n  Save\n</$button>","title":"Button Widget","modified":"2025-01-22T21:39:03.478Z","type":"text/markdown"},{"title":"ButtonWidget","caption":"button","created":"2013-10-24T14:19:00.000Z","modified":"2023-11-13T09:33:04.323Z","tags":["Widgets","TriggeringWidgets"],"type":"text/vnd.tiddlywiki","text":"! Introduction\n\nThe button widget displays an HTML `<button>` element that can perform a combination of optional actions when clicked:\n\n* Executing any ActionWidgets passed in the `actions` attribute\n* Executing any ActionWidgets that are immediate children of the button widget\n* Execute any integrated actions:\n** Navigate to a specified tiddler\n** Dispatch a user defined [[widget message|Messages]]\n** Trigger a user defined [[popup|PopupMechanism]]\n** Assign new text to a specified tiddler\n\nThe integrated actions are provided as a shortcut for invoking common actions. The same functionality is available via ActionWidgets, with the exception of the support for highlighting selected popups.\n\n! Content and Attributes\n\nThe content of the `<$button>` widget is displayed within the button.\n\n|!Attribute |!Description |\n|actions |A string containing ActionWidgets to be triggered when the key combination is detected. <<.from-version \"5.1.23\">> the <<.def \"modifier\">> variable lists the modifier keys that are pressed when the action is invoked. The possible modifiers are ''ctrl'', ''ctrl-alt'', ''ctrl-shift'', ''alt'', ''alt-shift'', ''shift'' and ''ctrl-alt-shift'' |\n|to |The title of the tiddler to navigate to |\n|message |The name of the [[widget message|Messages]] to send when the button is clicked |\n|param |The optional parameter to the message |\n|set |A TextReference to which a new value will be assigned |\n|setTitle |A title to which a new value will be assigned, ''without'' TextReference. Gets preferred over <<.attr set>> |\n|setField |A ''field name'' to which the new value will be assigned, if the attribute <<.attr setTitle>> is present. Defaults to the ''text'' field |\n|setIndex |An ''index'' to which the new value will be assigned, if the attribute <<.attr setTitle>> is present |\n|setTo |The new value to assign to the TextReference identified in the `set` attribute or the text field / the field specified through <<.attr setField>> / the index specified through <<.attr setIndex>> of the title given through <<.attr setTitle>> |\n|selectedClass |An optional additional CSS class to be assigned if the popup is triggered or the tiddler specified in <<.attr set>> already has the value specified in <<.attr setTo>>  |\n|default |Default value if <<.attr set>> tiddler is missing for testing against <<.attr setTo>> to determine <<.attr selectedClass>> |\n|popup |Title of a state tiddler for a popup that is toggled when the button is clicked. See PopupMechanism for details |\n|popupTitle |Title of a state tiddler for a popup that is toggled when the button is clicked. In difference to the <<.attr popup>> attribute, ''no'' TextReference is used. See PopupMechanism for details |\n|popupAbsCoords |<<.from-version \"5.2.4\">> If set to ''yes'' writes absolute coordinates to the tiddler referenced by the <<.attr popup>>. If set to ''no'' (the default) uses relative coordinates. See [[Coordinate Systems]] for details |\n|aria-label |Optional [[Accessibility]] label |\n|tooltip |Optional tooltip |\n|class |An optional CSS class name to be assigned to the HTML element|\n|data-* |<<.from-version \"5.3.2\">> Optional [[data attributes|https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes]] to be assigned to the HTML element |\n|style.* |<<.from-version \"5.3.2\">> Optional [[CSS properties|https://developer.mozilla.org/en-US/docs/Web/CSS/Reference]] to be assigned to the HTML element |\n|style |An optional CSS style attribute to be assigned to the HTML element |\n|tag |An optional html tag to use instead of the default \"button\" |\n|dragTiddler |An optional tiddler title making the button draggable and identifying the payload tiddler. See DraggableWidget for details |\n|dragFilter |An optional filter making the button draggable and identifying the list of payload tiddlers. See DraggableWidget for details |\n|tabindex |Sets the `tabindex` attribute of the button to the given value |\n|disabled|<<.from-version \"5.1.23\">> Optional, disables the button if set to \"yes\". Defaults to \"no\"|\n\n''Note:'' In almost all other cases where a TextReference is used as a widget attribute, it will be placed between curly brackets, to [[transclude|Transclusion in WikiText]] the value currently stored there. However, when we use a TextReference as the value of a button widget's <<.attr set>> attribute, we are referencing //the storage location itself//, rather than the value stored there, so we do ''not'' use curly brackets there. //Example:// we could code a button widget that sets the `caption` field of TiddlerA to be the same as that of TiddlerB as:\n\n<<.tip \"\"\"<$macrocall $name=\".from-version\" version=\"5.1.18\"/> <$macrocall $name=\".attr\" _=\"setTitle\"/>, <$macrocall $name=\".attr\" _=\"setField\"/> and <$macrocall $name=\".attr\" _=\"setIndex\"/> attributes allow specifying Tiddler states ''directly'', without interpreting them as [[TextReferences|TextReference]].\nThis is useful for edge-cases where titles may contain characters that are used to denote Tiddler fields or indices (`!!`, `##`)\"\"\">>\n\n```\n<$button set=\"TiddlerA!!caption\" setTo={{TiddlerB!!caption}} >\n\nPress me!\n\n</$button>\n```\n\n''Tip:'' Set ''class'' to `tc-btn-invisible tc-tiddlylink` to have a button look like an internal link.\n"},{"created":"2025-01-22T22:10:00.423Z","text":"To create a button with an icon in TiddlyWiki, you can follow these steps based on the information provided in the search results:\n\n## Step-by-Step Tutorial\n\n### Step 1: Create the Button Tiddler\n\n1. **Create a New Tiddler**: Start by creating a new tiddler for your button. You can name it something descriptive, like \"MyIconButton\".\n\n2. **Add Necessary Tags**: Tag this tiddler with `$:/tags/ViewToolbar` if you want it to appear in the view toolbar.\n\n### Step 2: Define the Button\n\nIn the content area of your newly created tiddler, add the following code to define your button:\n\n```html\n<$button class=\"tc-btn-invisible\" tooltip=\"Your Tooltip Here\">\n    <$action-sendmessage message=\"tm-new-tiddler\" param=\"TITLE OF YOUR NEW TIDDLER\" />\n    <$list filter=\"[<tv-config-toolbar-icons>match[yes]]\">\n        <img src=\"{{your-icon-tiddler}}\" alt=\"Icon\" style=\"width:22px; height:22px;\" />\n    </$list>\n    <$list filter=\"[<tv-config-toolbar-text>match[yes]]\">\n        <span class=\"tc-btn-text\"><$text text=\"Button Caption\"/></span>\n    </$list>\n</$button>\n```\n\n### Explanation of the Code:\n\n- **`<$button>`**: This is the main button widget.\n- **`class=\"tc-btn-invisible\"`**: This class makes the button invisible but still clickable. You can change this based on your design needs.\n- **`tooltip`**: This attribute provides a tooltip when hovering over the button.\n- **`<$action-sendmessage>`**: This action defines what happens when the button is clicked (e.g., creating a new tiddler).\n- **`<img src=\"{{your-icon-tiddler}}\" ... />`**: Replace `{{your-icon-tiddler}}` with the title of your tiddler that contains the icon image. Ensure that the image is appropriately sized (22px by 22px is common).\n- **`<$text text=\"Button Caption\"/>`**: This defines the text displayed on the button.\n\n### Step 3: Create or Add an Icon\n\nIf you don't have an icon yet, you can create or find one (like SVG images) and import it into TiddlyWiki as a tiddler. Make sure to set its title correctly to use it in your button.\n\n### Step 4: Configure Visibility\n\nYou may also need to create a visibility configuration tiddler named `$:/config/ViewToolbarButtons/Visibility/MyIconButton`. In this tiddler, type `show` to ensure your button appears in the toolbar.\n\n### Step 5: Save and Test\n\nAfter setting everything up, save your changes and refresh your TiddlyWiki. Your new button should now be visible in the toolbar and functional.\n\n## Additional Resources\n\nFor further details, you can refer to:\n- [Creating new toolbar buttons](https://tiddlywiki.com/static/Creating%2520new%2520toolbar%2520buttons.html) - This page provides comprehensive guidance on creating buttons and managing their visibility.\n- [How to create dynamic editor toolbar buttons](https://tiddlywiki.com/static/How%2520to%2520create%2520dynamic%2520editor%2520toolbar%2520buttons.html) - Offers insights into creating dynamic buttons within TiddlyWiki.\n\nThese resources will help deepen your understanding and provide additional examples for customizing buttons in TiddlyWiki.\n\nSources\n[1] Creating new toolbar buttons: TiddlyWiki v5.3.6 https://tiddlywiki.com/static/Creating%2520new%2520toolbar%2520buttons.html\n[2] How to create dynamic editor toolbar buttons - TiddlyWiki https://tiddlywiki.com/prerelease/static/How%2520to%2520create%2520dynamic%2520editor%2520toolbar%2520buttons.html\n[3] How to create another ADD tiddler button with predefined content? https://groups.google.com/g/tiddlywiki/c/IqDGCE1d594/m/SRf3dKg6BAAJ\n[4] [tw5] how to add a button to the top right of the tiddler to copy the title https://talk.tiddlywiki.org/t/tw5-how-to-add-a-button-to-the-top-right-of-the-tiddler-to-copy-the-title/794\n[5] How to create dynamic editor toolbar buttons - TiddlyWiki https://tiddlywiki.com/static/How%2520to%2520create%2520dynamic%2520editor%2520toolbar%2520buttons.html\n[6] How to create a single button to add different fields or field values to ... https://talk.tiddlywiki.org/t/how-to-create-a-single-button-to-add-different-fields-or-field-values-to-a-tiddler-in-multiple-sequential-steps/5637\n[7] button: TiddlyWiki v5.3.6 — a non-linear personal web notebook https://tiddlywiki.com/static/ButtonWidget.html\n[8] [tw] [TW5] Adding a button to the view toolbar https://tiddlywiki.narkive.com/luzIvXli/tw-tw5-adding-a-button-to-the-view-toolbar\n[9] Question: Button to add specific text to the Tiddler? : r/TiddlyWiki5 https://www.reddit.com/r/TiddlyWiki5/comments/j7ky2b/question_button_to_add_specific_text_to_the/\n","title":"IconButton","modified":"2025-01-22T22:11:58.168Z","type":"text/markdown"},{"created":"2025-01-21T21:44:00.776Z","color":"#ffd9ff","tags":["$:/plugins/nico/projectify/tags/Category"],"modified":"2025-01-21T21:44:03.614Z","title":"Livecode"},{"created":"2025-01-22T17:14:37.568Z","modified":"2025-01-22T17:14:37.569Z","title":"Morphing Shapes","tags":["Beautiful Widgets","todo"],"due":"","priority":""},{"created":"2025-01-22T21:37:35.447Z","text":"A procedure macro is a macro that allows you to do more complex procedure like things (such as embed WikiText).","title":"Procedure Macro","modified":"2025-01-23T09:26:36.769Z"},{"created":"2025-01-22T22:46:19.988Z","text":"Here we need a timeline.","title":"Roadmap","modified":"2025-01-22T22:46:32.159Z"},{"created":"2025-01-23T09:27:41.314Z","text":"The standard way to create a button is to use a [[Button Widget]]. Here we look at some simple standard templates that use the ButtonWidget.\n\n! Live Buttons\nHere is a LiveButton example:\n\n<button>Save Stack</button>","title":"Standard TiddlyWiki Buttons","modified":"2025-01-23T09:43:36.032Z"},{"created":"2025-01-22T17:14:18.583Z","modified":"2025-01-22T17:14:18.584Z","title":"SVG Icons","tags":["Beautiful Widgets","todo"],"due":"","priority":""},{"created":"2025-01-22T19:09:24.704Z","text":"So here we learn how to make beautiful buttons and style things with TiddlyCss. This is how we differ from FedWiki where the focus is on content and we espouse style.\n\n! Buttons\nHere we use a standard button by using the [[Button Widget]]:\n\n<$button>Save</$button>\n\nBut we can also create an IconButton.\n\n! Use html and css\n<div class=\"tc-card\" style=\"background-color: lightblue; color: darkblue; padding: 10px; border-radius: 5px;\">\n  <div class=\"tc-card-caption\" style=\"font-weight: bold; font-size: 1.2em;\">\n    Example Card Caption\n  </div>\n  <div class=\"tc-card-content\">\n    This is where the card content would go.\n  </div>\n</div>\n\n! Shiraz\nAnd here we show buttons styled using features provided by the [[Shiraz Plugin]]:\n\n<$button type=\"button\" class=\"btn btn-primary btn-lg\">Large button</$button>\n<$button type=\"button\" class=\"btn btn-primary\">Normal button</$button>\n<$button type=\"button\" class=\"btn btn-primary btn-sm\">Small button</$button>\n\n<$button type=\"button\" class=\"btn btn-success btn-lg\">Large button</$button>\n<$button type=\"button\" class=\"btn btn-success\">Normal button</$button>\n<$button type=\"button\" class=\"btn btn-success btn-sm\">Small button</$button>\n\n! Modals\n<$button message=\"tm-modal\" param=\"Roadmap\">Open demo modal</$button>\n\n! Notes\n<<interstitial>>\n\n@@.interstitial\n* ''21:23'' We also explore css styling on tiddlywiki.com\n* ''21:24'' $:[[/editions/tw5.com/doc-styles]]  and [[$:/editions/tw5.com/doc-macros]]\n@@","tags":[],"title":"Tiddly Buttons","modified":"2025-01-22T23:57:57.172Z"},{"created":"2025-01-22T17:14:11.479Z","text":"First let'ts look at [[Standard TiddlyWiki Buttons]]. Then we can check these with regard to the [[Shiraz Plugin]]","modified":"2025-01-22T17:17:10.565Z","title":"TiddlyWiki Buttons","tags":["Beautiful Widgets","todo"],"due":"20250122235959999","priority":"1"},{"created":"2025-01-22T17:14:53.961Z","modified":"2025-01-22T17:14:53.962Z","title":"Wasm Animations","tags":["Beautiful Widgets","todo"],"due":"","priority":""},{"created":"2025-01-21T21:36:52.380Z","text":"<<interstitial>>\n\n@@.interstitial\n* ''17:03'' Let's get visual and have some fun. Focus on Livecode wasm and visual integration first.\n* ''17:04'' Get a result that can be used, and shipped. Developers who ship.\n* ''21:22'' Learning css and HTML design through TiddlyWiki\n@@","title":"Working on","modified":"2025-01-22T21:22:05.735Z"}]